[{"/Users/jonasersland/DEV/Opdahl/sanity-react/src/index.js":"1","/Users/jonasersland/DEV/Opdahl/sanity-react/src/reportWebVitals.js":"2","/Users/jonasersland/DEV/Opdahl/sanity-react/src/App.js":"3","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/exhibition-overview.page.jsx":"4","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/exhibition-individual.page.jsx":"5","/Users/jonasersland/DEV/Opdahl/sanity-react/src/client.js":"6","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/artist-overview.page.jsx":"7","/Users/jonasersland/DEV/Opdahl/sanity-react/src/components/nav-bar/nav-bar.component.jsx":"8","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/artist-individual.page.jsx":"9","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/frontpage.page.jsx":"10","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/event-overview.page.jsx":"11","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/event-individual.page.jsx":"12","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/about.page.jsx":"13"},{"size":500,"mtime":1610633176912,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1610633176912,"results":"16","hashOfConfig":"15"},{"size":1238,"mtime":1613668787136,"results":"17","hashOfConfig":"15"},{"size":1770,"mtime":1619006637431,"results":"18","hashOfConfig":"15"},{"size":6877,"mtime":1615301544418,"results":"19","hashOfConfig":"15"},{"size":251,"mtime":1610633931146,"results":"20","hashOfConfig":"15"},{"size":3127,"mtime":1613668914299,"results":"21","hashOfConfig":"15"},{"size":836,"mtime":1613668765304,"results":"22","hashOfConfig":"15"},{"size":6510,"mtime":1615299771821,"results":"23","hashOfConfig":"15"},{"size":3317,"mtime":1615303430093,"results":"24","hashOfConfig":"15"},{"size":1417,"mtime":1613668888099,"results":"25","hashOfConfig":"15"},{"size":4721,"mtime":1615301546281,"results":"26","hashOfConfig":"15"},{"size":3528,"mtime":1615302030819,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"9gn00k",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/jonasersland/DEV/Opdahl/sanity-react/src/index.js",[],["62","63"],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/reportWebVitals.js",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/App.js",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/exhibition-overview.page.jsx",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/exhibition-individual.page.jsx",["64","65"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport moment from 'moment';\n\nimport 'photoswipe/dist/photoswipe.css';\nimport 'photoswipe/dist/default-skin/default-skin.css';\n\nimport { Gallery, Item } from 'react-photoswipe-gallery';\n\nimport NavBar from '../components/nav-bar/nav-bar.component';\n\nconst builder = imageUrlBuilder(sanityClient);\n\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n\nconst isTabletOrMobileDevice = useMediaQuery({\n    query: '(max-width: 1000px)'\n});\nconst [viewpostSize, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight\n});\n\nconst [postData, setPostData] = useState(null);\nconst {slug} = useParams();\n//probably an error with using variable in query, look into it\nuseEffect(() => {\n    sanityClient\n    .fetch(\n        `*[slug.current == \"${slug}\"]{ \n            openingDate,\n            closingDate,\n            exhibitionTitle,\n            exhibitionSubTitle,\n            previewImage,\n            \"exhibitionImages\": exhibitionImages[]{caption, \"imageUrl\": image.asset->url, \"imageMeta\": image.asset->metadata}[1...100],\n            \"previewImage\": exhibitionImages[]{caption,\"imageUrl\": image.asset->url,\"imageMeta\": image.asset->metadata}[0],\n            exhibitionText\n        }`\n    )\n    .then((data) => setPostData(data[0]))\n    .catch(console.error);\n}, [slug]);\nconsole.log(postData);\n  if (!postData) return <div>Loading...</div>;\n  const setPreviewImageStyle = () =>{\n    if(isTabletOrMobileDevice){\n        return ({backgroundImage: `url(${postData.previewImage.imageUrl})`, width: `${viewpostSize.x}px`, height:`${postData.previewImage.imageMeta.dimensions.height/(postData.previewImage.imageMeta.dimensions.width/viewpostSize.x)}px`})\n    } else {\n        return ({backgroundImage: `url(${postData.previewImage.imageUrl})`})\n    }\n}\nconst previewImageStyle = setPreviewImageStyle();\n  const opening = moment(postData.openingDate).format('DD.MM.YY');\n  const closing = moment(postData.closingDate).format('DD.MM.YY');\n\n  return (\n    <div>\n        <NavBar />\n        <div className='contentWrapper'>\n            {!isTabletOrMobileDevice ? '' :\n                <div className='textSectionTitleWrapper'>\n                    <div className=\"date gray\">\n                        {opening} - {closing}\n                    </div>\n                    <div className='title'>\n                        {postData.exhibitionTitle}<br/>\n                        {postData.exhibitionSubTitle}\n\n                    </div>\n                </div>\n            }\n            <div className='imageSection'>\n\n            <div className='singleImage' style={previewImageStyle}>\n                    <div className='singleImageCaption singleImageCaptionMeta gray'>\n                        <BlockContent\n                            blocks={postData.previewImage.caption}\n                            projectId={sanityClient.clientConfig.projectId}\n                            dataset={sanityClient.clientConfig.dataset}\n                        />\n                    </div> \n                </div>\n\n                {postData.exhibitionImages ?\n                    <div className='imageSectionGrid'>\n                        <Gallery>\n\n                            { postData.exhibitionImages.map((exhibitionImage, index) => {\n\n                                function toPlainText(blocks = []) {\n                                    return blocks\n                                    // loop through each block\n                                    .map(block => {\n                                        // if it's not a text block with children, \n                                        // return nothing\n                                        if (block._type !== 'block' || !block.children) {\n                                        return ''\n                                        }\n                                        // loop through the children spans, and join the\n                                        // text strings\n                                        return block.children.map(child => child.text).join(\"\\n\")\n                                    })\n                                    // join the paragraphs leaving split by two linebreaks\n                                    .join('\\n\\n')\n                                }\n                                \n                                const caption = toPlainText(exhibitionImage.caption);\n                                console.log(caption);\n                                return(\n                                    <div key={index} className=\"imageSectionGridItem\">\n                                        <Item\n                                            key={index}\n                                            original={exhibitionImage.imageUrl}\n                                            thumbnail={urlFor(exhibitionImage.imageUrl).width(200).url()}\n                                            width={exhibitionImage.imageMeta.dimensions.width}\n                                            height={exhibitionImage.imageMeta.dimensions.height}\n                                            title={caption}\n                                        >\n                                        {({ ref, open }) => (\n                                            <img ref={ref} onClick={open} src={exhibitionImage.imageUrl} />\n                                        )}\n                                        </Item>\n                                    </div>\n                                )\n                            })}\n\n                        </Gallery>\n                    </div>\n                :\n                \"\"\n                }\n\n            </div>\n            <div className='textSection'>\n                {isTabletOrMobileDevice ? '' :\n                    <div className='textSectionTitleWrapper'>\n                        <div className=\"date gray\">\n                            {opening} - {closing}\n                        </div>\n                        <div className='title'>\n                            {postData.exhibitionTitle}<br/>\n                            {postData.exhibitionSubTitle}\n\n                        </div>\n                    </div>\n                }\n                <div className='textSectionContent'>\n                    <BlockContent\n                        blocks={postData.exhibitionText}\n                        projectId={sanityClient.clientConfig.projectId}\n                        dataset={sanityClient.clientConfig.dataset}\n                    />\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}","/Users/jonasersland/DEV/Opdahl/sanity-react/src/client.js",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/artist-overview.page.jsx",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/components/nav-bar/nav-bar.component.jsx",["66","67"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () =>(\n    <div className='topWrapper'>\n        <div className='logoWrapper'>\n            <div className='logo'>\n            <Link to={\"/Ny/\"}>Galleri Opdahl</Link>\n            </div>\n        </div>\n        <div className='menuWrapper'>\n            <div className='menu'>\n                <Link to={\"/Ny/artists\"}>Artists</Link>\n                <Link to={\"/Ny/exhibitions\"}>Exhibitions</Link>\n                <Link to={\"/Ny/newspage\"}>News</Link><br/>\n                <Link to={\"/Ny/about\"}>About</Link>\n                <a href='https://www.instagram.com/galleriopdahl/'>Instagram</a>\n                <a href='https://www.artsy.net/galleri-opdahl'>Artsy</a>\n            </div>\n        </div>\n    </div>\n)\n\nexport default NavBar;",["68","69"],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/artist-individual.page.jsx",["70","71"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\n\nimport { Gallery, Item } from 'react-photoswipe-gallery'\n\nimport NavBar from '../components/nav-bar/nav-bar.component';\n\nconst builder = imageUrlBuilder(sanityClient);\n\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n\n    const isTabletOrMobileDevice = useMediaQuery({\n        query: '(max-width: 1000px)'\n      })\nconst [viewpostSize, setSize] = useState({\n        x: window.innerWidth,\n        y: window.innerHeight\n      });\n\nconst [postData, setPostData] = useState(null);\nconst {slug} = useParams();\n\nuseEffect(() => {\n    sanityClient\n    .fetch(\n        `*[slug.current == \"${slug}\"]{\n            firstName,\n            lastName,\n            slug,\n            previewImage,\n            \"previewImage\": workImages[]{caption, \"imageUrl\": image.asset->url,\"imageMeta\": image.asset->metadata}[0],\n            \"workImages\": workImages[]{caption, \"imageUrl\": image.asset->url, \"imageMeta\": image.asset->metadata}[1...100],\n            artistBio,\n            press\n        }`\n    )\n    .then((data) => setPostData(data[0]))\n    .catch(console.error);\n}, [slug]);\nconsole.log(postData);\n  if (!postData) return <div>Loading...</div>;\n  const setPreviewImageStyle = () =>{\n    if(isTabletOrMobileDevice){\n        return ({backgroundImage: `url(${postData.previewImage.imageUrl})`, width: `${viewpostSize.x}px`, height:`${postData.previewImage.imageMeta.dimensions.height/(postData.previewImage.imageMeta.dimensions.width/viewpostSize.x)}px`})\n    } else {\n        return ({backgroundImage: `url(${postData.previewImage.imageUrl})`})\n    }\n    }\nconst previewImageStyle = setPreviewImageStyle();\n  return (\n    <div>\n        <NavBar />\n        <div className='contentWrapper'>\n            {!isTabletOrMobileDevice ? '' :\n                <div className='textSectionTitleWrapper'>\n                    <div className='title'>\n                        {postData.firstName} {postData.lastName}\n                    </div>\n                </div>\n            }\n            <div className='imageSection'>\n                <div className='singleImage' style={previewImageStyle}>\n                    <div className='singleImageCaption singleImageCaptionMeta gray'>\n                        <BlockContent\n                            blocks={postData.previewImage.caption}\n                            projectId={sanityClient.clientConfig.projectId}\n                            dataset={sanityClient.clientConfig.dataset}\n                        />\n                    </div>\n                </div>\n\n                <div className='imageSectionGrid'>\n                    <Gallery>\n\n                        { postData.workImages.map((workImage, index) => {\n\n                            function toPlainText(blocks = []) {\n                                return blocks\n                                // loop through each block\n                                .map(block => {\n                                    // if it's not a text block with children, \n                                    // return nothing\n                                    if (block._type !== 'block' || !block.children) {\n                                    return ''\n                                    }\n                                    // loop through the children spans, and join the\n                                    // text strings\n                                    return block.children.map(child => child.text).join(\"\\n\")\n                                })\n                                // join the paragraphs leaving split by two linebreaks\n                                .join('\\n\\n')\n                            }\n                            \n                            const caption = toPlainText(workImage.caption);\n                            console.log(caption);\n                            return(\n                                <div key={index} className=\"imageSectionGridItem\">\n                                    <Item\n                                        key={index}\n                                        original={workImage.imageUrl}\n                                        thumbnail={urlFor(workImage.imageUrl).width(200).url()}\n                                        width={workImage.imageMeta.dimensions.width}\n                                        height={workImage.imageMeta.dimensions.height}\n                                        title={caption}\n                                    >\n                                    {({ ref, open }) => (\n                                        <img ref={ref} onClick={open} src={workImage.imageUrl} />\n                                    )}\n                                    </Item>\n                                </div>\n                            )\n                        })}\n\n                    </Gallery>\n                </div>\n\n            </div>\n            <div className='textSection'>\n                {isTabletOrMobileDevice ? '' :\n                    <div className='textSectionTitleWrapper'>\n                        <div className='title'>\n                            {postData.firstName} {postData.lastName}\n                        </div>\n                    </div>\n                }\n                <div className='textSectionContent'>\n                    <BlockContent\n                        blocks={postData.artistBio}\n                        projectId={sanityClient.clientConfig.projectId}\n                        dataset={sanityClient.clientConfig.dataset}\n                    />\n\n                    {postData.press ?\n                        <div className=\"press\">\n                            <div className=\"textSectionTitle\">Press</div>\n                            <BlockContent\n                                blocks={postData.press}\n                                projectId={sanityClient.clientConfig.projectId}\n                                dataset={sanityClient.clientConfig.dataset}\n                            />\n                        </div>\n                    : \n                        \"\"\n                    }\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/frontpage.page.jsx",["72","73"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport moment from 'moment';\nimport { Link } from \"react-router-dom\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport NavBar from '../components/nav-bar/nav-bar.component';\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n\n    const isTabletOrMobileDevice = useMediaQuery({\n        query: '(max-width: 1000px)'\n      });\n\nconst [postData, setPostData] = useState(null);\nconst {slug} = useParams();\n\nuseEffect(() => {\n    sanityClient\n    .fetch(\n        `*[_type == \"frontpage\"]{\n            \"type\":frontpageItem->{_type},\n           \"featuredItem\": frontpageItem->{\n               exhibitionTitle,\n               exhibitionSubTitle,\n               openingDate,\n               closingDate,\n               slug,\n               \"previewImageUrl\": exhibitionImages[]{\"imageUrl\": image.asset->url}[0]\n            },\n        }`\n    )\n    .then((data) => setPostData(data[0]))\n    .catch(console.error);\n}, [slug]);\n\n  if (!postData) return <div>Loading...</div>;\n  const {exhibitionTitle,exhibitionSubTitle,openingDate,closingDate,previewImageUrl} = postData.featuredItem;\n  const currentType = postData.type._type;\n    const opening = moment(openingDate).format('DD.MM.YY');\n    const closing = moment(closingDate).format('DD.MM.YY');\n  return (\n    <div className=\"home\">\n        <NavBar />\n        <div className='contentWrapper'>\n\n            {!isTabletOrMobileDevice ? '' :\n                <div className='mobileTextSection'>\n                    <div className='textSectionTitleWrapper'>\n                        <div className=\"date gray\">\n                            {opening} - {closing}\n                        </div>\n                        <div className='title'>\n                            <Link to={\"/Ny/\" + currentType + \"/\" + postData.featuredItem.slug.current}>\n                                {exhibitionTitle}<br/>\n                                {exhibitionSubTitle}\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            }\n\n            <div className='imageSection'>\n            <Link to={\"/Ny/\" + currentType + \"/\" + postData.featuredItem.slug.current}>\n                <div className=\"singleImageFullscreen\" style={{backgroundImage: `url(${previewImageUrl.imageUrl})`}}></div>\n            </Link>\n            </div>\n\n            {isTabletOrMobileDevice ? '' :\n            <div className='textSection'>\n                <div className='textSectionTitleWrapper'>\n                    <div className=\"date gray\">\n                        {opening} - {closing}\n                    </div>\n                    <div className='title'>\n                        <Link to={\"/Ny/\" + currentType + \"/\" + postData.featuredItem.slug.current}>\n                            {exhibitionTitle}<br/>\n                            {exhibitionSubTitle}\n                        </Link>\n                    </div>\n                </div>\n            </div>\n            }\n\n        </div>\n    </div>\n  );\n}","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/event-overview.page.jsx",[],"/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/event-individual.page.jsx",["74","75","76","77","78"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport moment from 'moment';\n\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\n\nimport { Gallery, Item } from 'react-photoswipe-gallery'\n\nimport NavBar from '../components/nav-bar/nav-bar.component';\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n    const isTabletOrMobileDevice = useMediaQuery({\n        query: '(max-width: 1000px)'\n      })\n\nconst [postData, setPostData] = useState(null);\nconst {slug} = useParams();\nconst [viewpostSize, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight\n  });\nuseEffect(() => {\n    sanityClient\n    .fetch(\n        `*[slug.current == \"${slug}\"]{\n            eventTitle,\n            slug,\n            vimeoEmbed,\n            openingDate,\n            closingDate,\n            \"previewImageUrl\": previewImage.asset->url,\n            \"previewImageMeta: previewImage.asset->metadata,\n            \"eventImages\": eventImages[]{title,subTitle, \"imageUrl\": image.asset->url},\n            previewImageCaption,\n            eventText\n        }`\n    )\n    .then((data) => setPostData(data[0]))\n    .catch(console.error);\n}, [slug]);\nconsole.log(postData);\n  if (!postData) return <div>Loading...</div>;\n\n  const setPreviewImageStyle = () =>{\n    if(isTabletOrMobileDevice){\n        return ({backgroundImage: `url(${postData.previewImageUrl})`, width: `${viewpostSize.x}px`, height:`${postData.previewImageMeta.dimensions.height/(postData.previewImageMeta.dimensions.width/viewpostSize.x)}px`})\n    } else {\n        return ({backgroundImage: `url(${postData.previewImageUrl})`})\n    }\n}\nconst previewImageStyle = setPreviewImageStyle();\n\n  let vimeoEmbedId = null;\n  let opening = null;\n  let closing = null;\n\n  if (postData.vimeoEmbed){\n    vimeoEmbedId = postData.vimeoEmbed.split(\"/\").pop();\n  }\n  if (postData.openingDate){\n    opening = moment(postData.openingDate).format('DD.MM.YY');\n  }\n  if (postData.closingDate){\n    closing = moment(postData.closingDate).format('DD.MM.YY');\n  }\n\n  return (\n    <div>\n        <NavBar />\n        <div className='contentWrapper'>\n            {!isTabletOrMobileDevice ? '' :\n                    <div className='textSectionTitleWrapper'>\n                    <div className=\"date gray\">\n                        {opening ? `${opening}` : \"\"} {closing ? ` - ${closing}` : \"\"}\n                    </div>\n                    <div className='title'>\n                        {postData.eventTitle}\n                    </div>\n                </div>\n            }\n            <div className='imageSection'>\n                {postData.vimeoEmbed ? \n                    <div className=\"iframeEmbed\">\n                        <iframe src={`https://player.vimeo.com/video/${vimeoEmbedId}?color=ffffff&badge=0`} width=\"640\" height=\"268\" frameBorder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowFullScreen></iframe>\n                    </div>\n                :\n                    <div className='singleImage' style={previewImageStyle}>\n                        <div className='singleImageCaption singleImageCaptionMeta gray'>\n                            <BlockContent\n                                blocks={postData.previewImageCaption}\n                                projectId={sanityClient.clientConfig.projectId}\n                                dataset={sanityClient.clientConfig.dataset}\n                            />\n                        </div>\n                    </div>\n                }\n            </div>\n            <div className='textSection'>\n                {isTabletOrMobileDevice ? '' :\n                    <div className='textSectionTitleWrapper'>\n                        <div className=\"date gray\">\n                            {opening ? `${opening}` : \"\"} {closing ? ` - ${closing}` : \"\"}\n                        </div>\n                        <div className='title'>\n                            {postData.eventTitle}\n                        </div>\n                    </div>\n                }\n                <div className='textSectionContent'>\n                    <BlockContent\n                        blocks={postData.eventText}\n                        projectId={sanityClient.clientConfig.projectId}\n                        dataset={sanityClient.clientConfig.dataset}\n                    />\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}","/Users/jonasersland/DEV/Opdahl/sanity-react/src/pages/about.page.jsx",["79","80","81","82"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport 'photoswipe/dist/photoswipe.css'\nimport 'photoswipe/dist/default-skin/default-skin.css'\n\nimport { Gallery, Item } from 'react-photoswipe-gallery'\n\nimport NavBar from '../components/nav-bar/nav-bar.component';\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n\n    const isTabletOrMobileDevice = useMediaQuery({\n        query: '(max-width: 1000px)'\n      });\n\nconst [postData, setPostData] = useState(null);\nconst {slug} = useParams();\nconst [viewpostSize, setSize] = useState({\n    x: window.innerWidth,\n    y: window.innerHeight\n  });\nuseEffect(() => {\n    sanityClient\n    .fetch(\n        `*[_type == \"about\"]{\n            title,\n            slug,\n            aboutText,\n            previewImageText,\n            \"previewImageUrl\": previewImage.asset->url,\n            \"previewImageMeta\": previewImage.asset->metadata,\n        }`\n    )\n    .then((data) => setPostData(data[0]))\n    .catch(console.error);\n}, [slug]);\nconsole.log(postData);\n  if (!postData) return <div>Loading...</div>;\n\n  const setPreviewImageStyle = () =>{\n    if(isTabletOrMobileDevice){\n        return ({backgroundImage: `url(${postData.previewImageUrl})`, width: `${viewpostSize.x}px`, height:`${postData.previewImageMeta.dimensions.height/(postData.previewImageMeta.dimensions.width/viewpostSize.x)}px`})\n    } else {\n        return ({backgroundImage: `url(${postData.previewImageUrl})`})\n    }\n}\nconst previewImageStyle = setPreviewImageStyle();\n\n  return (\n    <div>\n        <NavBar />\n        <div className='contentWrapper'>\n        {!isTabletOrMobileDevice ? '' : \n            <div className='textSectionTitleWrapper'>\n                <div className='title'>\n                    {postData.title}\n                </div>\n            </div>\n        }\n            <div className='imageSection'>\n\n                <div className='singleImage' style={previewImageStyle}>\n                    <div className='singleImageCaption'>\n                        <div className='singleImageCaptionMeta gray'>\n                                            <BlockContent\n                                            blocks={postData.previewImageText}\n                                            projectId={sanityClient.clientConfig.projectId}\n                                            dataset={sanityClient.clientConfig.dataset}\n                                        />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='textSection'>\n                {isTabletOrMobileDevice ? '' : \n                    <div className='textSectionTitleWrapper'>\n                        <div className='title'>\n                            {postData.title}\n                        </div>\n                    </div>\n                }\n                <div className='textSectionContent'>\n                    <BlockContent\n                        blocks={postData.aboutText}\n                        projectId={sanityClient.clientConfig.projectId}\n                        dataset={sanityClient.clientConfig.dataset}\n                    />\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":28,"column":22,"nodeType":"89","messageId":"90","endLine":28,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":130,"column":45,"nodeType":"93","endLine":130,"endColumn":108},{"ruleId":"87","severity":1,"message":"94","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"95","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"83","replacedBy":"96"},{"ruleId":"85","replacedBy":"97"},{"ruleId":"87","severity":1,"message":"88","line":26,"column":22,"nodeType":"89","messageId":"90","endLine":26,"endColumn":29},{"ruleId":"91","severity":1,"message":"92","line":118,"column":41,"nodeType":"93","endLine":118,"endColumn":98},{"ruleId":"87","severity":1,"message":"98","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":20},{"ruleId":"87","severity":1,"message":"99","line":13,"column":10,"nodeType":"89","messageId":"90","endLine":13,"endColumn":16},{"ruleId":"87","severity":1,"message":"100","line":13,"column":10,"nodeType":"89","messageId":"90","endLine":13,"endColumn":17},{"ruleId":"87","severity":1,"message":"101","line":13,"column":19,"nodeType":"89","messageId":"90","endLine":13,"endColumn":23},{"ruleId":"87","severity":1,"message":"99","line":18,"column":10,"nodeType":"89","messageId":"90","endLine":18,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":29,"column":22,"nodeType":"89","messageId":"90","endLine":29,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":95,"column":25,"nodeType":"93","endLine":95,"endColumn":215},{"ruleId":"87","severity":1,"message":"100","line":11,"column":10,"nodeType":"89","messageId":"90","endLine":11,"endColumn":17},{"ruleId":"87","severity":1,"message":"101","line":11,"column":19,"nodeType":"89","messageId":"90","endLine":11,"endColumn":23},{"ruleId":"87","severity":1,"message":"99","line":16,"column":10,"nodeType":"89","messageId":"90","endLine":16,"endColumn":16},{"ruleId":"87","severity":1,"message":"88","line":28,"column":22,"nodeType":"89","messageId":"90","endLine":28,"endColumn":29},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'setSize' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.",["104"],["105"],"'BlockContent' is defined but never used.","'urlFor' is defined but never used.","'Gallery' is defined but never used.","'Item' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation"]